const CircularDependencyPlugin = require('circular-dependency-plugin');
const path = require('path');
const { IgnorePlugin } = require('webpack');

// check nodejs requirement
const requiredNodeJsVersion = '16.7.0'.split('.');
const currNodeJsVersion = process.versions.node.split('.');
for (let i = 0; i < currNodeJsVersion.length; i++) {
    if (Number(currNodeJsVersion[i]) >= Number(requiredNodeJsVersion[i])) {
        continue;
    }

    const err = new Error('Node.js version requires at least v16.7.0.');
    err.stack = undefined;
    throw err;
}

const __MAX_CYCLES = 3;
let cycleCount = 0;

const mode = process.env.NODE_ENV ?? 'development';
const isDev = mode === 'development';

const optionalPlugins = getOptionalPlugins();

/**
 * The webpack configuration
 */
const baseConfiguration = {
    node: {
        __dirname: true
    },
    mode: mode,
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                use: 'ts-loader',
                exclude: [
                    /node_modules/,
                ]
            },
            {
                test: /.node$/,
                loader: 'node-loader',
            }
        ]
    },
    resolve: {
        extensions: ['.tsx', '.ts', '.js'],
        alias: {
            src: path.resolve(__dirname, 'src/')
        },
    },
    plugins: [
        new CircularDependencyPlugin({
            exclude: /a\.js|node_modules/,
            include: /src/,
            cwd: process.cwd(),
            // `onStart` is called before the cycle detection starts
            onStart({ _compilation }) {
              console.log('start detecting webpack modules cycles');
            },
            // `onDetected` is called for each module that is cyclical
            onDetected({ module: _webpackModuleRecord, paths, compilation }) {
                // `paths` will be an Array of the relative module paths that make up the cycle
                // `module` will be the module record generated by webpack that caused the cycle
                cycleCount++;
                // compilation.errors.push(new Error(paths.join(' -> ')))
                compilation.warnings.push(new Error(paths.join(' -> ')));
            },
            // `onEnd` is called before the cycle detection ends
            onEnd({ compilation }) {
                console.log('end detecting webpack modules cycles');
                if (cycleCount > __MAX_CYCLES) {
                    compilation.errors.push(new Error(
                        `Detected ${cycleCount} cycles which exceeds configured limit of ${__MAX_CYCLES}`
                    ));
                }
            },
        }),
        ...optionalPlugins,
    ],
    /**
     * Source maps are used to display your original JavaScript while debugging, 
     * which is a lot easier to look at than minified production code.
     * 
     * See more choice here https://webpack.js.org/configuration/devtool/
     */
    devtool: isDev ? 'eval-source-map' : 'source-map',
    stats: 'normal',
    bail: true,
};

module.exports = [
    Object.assign({}, baseConfiguration, {
        target: 'electron-main',
        entry: {
            main: './src/main.js',
        },
        output: {
            filename: '[name]-bundle.js',
            path: path.resolve(__dirname, './dist')
        },
    }),
    Object.assign({}, baseConfiguration, {
        target: 'electron-renderer',
        entry: {
            renderer: './src/code/browser/renderer.ts',
        },
        output: {
            filename: '[name]-bundle.js',
            path: path.resolve(__dirname, './dist')
        },
    }),
    Object.assign({}, baseConfiguration, {
        target: 'electron-renderer',
        entry: {
            renderer: './src/code/browser/lookup/browser.lookup.ts',
        },
        output: {
            filename: '[name]-lookup-bundle.js',
            path: path.resolve(__dirname, './dist')
        },
    }),
];

function getOptionalPlugins() {
    const plugins = [];

    // https://github.com/paulmillr/chokidar/issues/828
    if (process.platform !== "darwin") {
        plugins.push(
            new IgnorePlugin({ resourceRegExp: /^fsevents$/, })
        );
    }

    return plugins;
}