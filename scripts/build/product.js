const fs = require('fs');
const chokidar = require('chokidar');
const path = require('path');
const { log, ScriptHelper } = require('../utility');

/**
 * @file product.js
 * @description A simple Node.js script to monitor the root `package.json` for 
 * changes. When `package.json` updates, it regenerates a corresponding 
 * `product.json` file.
 */

const cwd = process.cwd();
const PACKAGE_JSON_PATH = path.join(cwd, 'package.json');
const PRODUCT_JSON_PATH = path.join(cwd, 'product.json');

main();
function main() {
    const env = ScriptHelper.getEnv(['WATCH_MODE']);
    const isWatch = env.WATCH_MODE == 'true';

    initialization();
    if (isWatch) {
        startWatchChanges();
    }
}

function initialization() {
    log('info', '[ProductJson] Initializing...');
    const packageJson = getPackageJson();
    if (packageJson) {
        generateProductJson(packageJson);
    }
}

function startWatchChanges() {
    log('info', '[ProductJson] start watching changes in "PACKAGE_JSON_PATH".');
    const watcher = chokidar.watch(PACKAGE_JSON_PATH, {
        persistent: true,
        ignoreInitial: true,
    });

    watcher.on('change', (changedPath) => {
        log('info', `[ProductJson] Detected change in "${changedPath}".`);
        const packageJson = getPackageJson();
        if (packageJson) {
            generateProductJson(packageJson);
        }
    });

    watcher.on('error', (error) => {
        log('error', `[ProductJson] File watch error: ${error}`);
    });
}

function getPackageJson() {
    try {
        const raw = fs.readFileSync(PACKAGE_JSON_PATH, 'utf-8');
        return JSON.parse(raw);
    } catch (error) {
        log('error', '[ProductJson] Failed to read package.json:', error);
        return null;
    }
}

function generateProductJson(packageJson) {
    log('info', '[ProductJson] Generating `product.json`...');

    // 这里可以根据自身需求调整生成逻辑
    const productJson = {
        "": [
            "--------------------------------------------------------------------------------------------",
            "Copyright (c) Nota. All rights reserved.",
            "--------------------------------------------------------------------------------------------",
            "Do not edit this file. It is machine generated."
        ],
        projectName: packageJson.name,
        applicationName: packageJson.name,
        description: packageJson.description,
        version: packageJson.version,
        license: packageJson.license,
    };

    try {
        fs.writeFileSync(PRODUCT_JSON_PATH, JSON.stringify(productJson, null, 4), 'utf-8');
        log('ok', '[ProductJson] `product.json` generated successfully.\n');
    } catch (error) {
        log('error', '[ProductJson] Failed to write product.json:', error);
    }
}